{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","task","handleChange","bind","assertThisInitialized","handleSubmit","evt","setState","defineProperty","target","name","value","preventDefault","createTodo","objectSpread","id","uuid","completed","react_default","a","createElement","className","onSubmit","htmlFor","type","placeholder","onChange","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","console","log","removeTodo","updateTodo","toggleTodo","onClick","TodoList","todos","create","remove","update","toggleCompletion","newTodo","concat","toConsumableArray","filter","t","updatedTask","updatedTodos","map","todo","_this2","src_Todo_0","key","src_NewTodoForm_0","App","src_TodoList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69e00bfb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport uuid from \"uuid/v4\";\nimport \"./NewTodoForm.css\";\n\nclass NewTodoForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { task: \"\" };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n  handleSubmit(evt) {\n    evt.preventDefault();\n    this.props.createTodo({ ...this.state, id: uuid(), completed: false });\n    this.setState({ task: \"\" });\n  }\n  render() {\n    return (\n      <form className='NewTodoForm' onSubmit={this.handleSubmit}>\n        <label htmlFor='task'>New Todo</label>\n        <input\n          type='text'\n          placeholder='New Todo'\n          id='task'\n          name='task'\n          value={this.state.task}\n          onChange={this.handleChange}\n        />\n        <button>Add Todo</button>\n      </form>\n    );\n  }\n}\nexport default NewTodoForm;\n","import React, { Component } from \"react\";\nimport \"./Todo.css\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n      task: this.props.task\n    };\n    this.handleRemove = this.handleRemove.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n  // componentDidUpdate(prevProps, prevState) {\n  //   console.log(\"TODO COMPONENT DID UPDATE!\");\n  //   console.log(prevProps.task);\n  //   console.log(this.props.task);\n  // }\n  componentWillUnmount() {\n    console.log(\"IN COMPONENT WILL UNMOUNT!\");\n  }\n  handleRemove() {\n    this.props.removeTodo(this.props.id);\n  }\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing });\n  }\n\n  handleUpdate(evt) {\n    evt.preventDefault();\n    //take new task data and pass up to parent\n    this.props.updateTodo(this.props.id, this.state.task);\n    this.setState({ isEditing: false });\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n  handleToggle(evt) {\n    this.props.toggleTodo(this.props.id);\n  }\n  render() {\n    let result;\n    if (this.state.isEditing) {\n      result = (\n        <div className='Todo'>\n          <form className='Todo-edit-form' onSubmit={this.handleUpdate}>\n            <input\n              type='text'\n              value={this.state.task}\n              name='task'\n              onChange={this.handleChange}\n            />\n            <button>Save</button>\n          </form>\n        </div>\n      );\n    } else {\n      result = (\n        <div className='Todo'>\n          <li\n            className={\n              this.props.completed ? \"Todo-task completed\" : \"Todo-task\"\n            }\n            onClick={this.handleToggle}\n          >\n            {this.props.task}\n          </li>\n          <div className='Todo-buttons'>\n            <button onClick={this.toggleForm}>\n              <i className='fas fa-pen' />\n            </button>\n            <button onClick={this.handleRemove}>\n              <i className='fas fa-trash' />\n            </button>\n          </div>\n        </div>\n      );\n    }\n    return result;\n  }\n}\nexport default Todo;\n","import React, { Component } from \"react\";\nimport NewTodoForm from \"./NewTodoForm\";\nimport Todo from \"./Todo\";\nimport \"./TodoList.css\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n    this.create = this.create.bind(this);\n    this.remove = this.remove.bind(this);\n    this.update = this.update.bind(this);\n    this.toggleCompletion = this.toggleCompletion.bind(this);\n  }\n  create(newTodo) {\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    });\n  }\n  remove(id) {\n    this.setState({\n      todos: this.state.todos.filter(t => t.id !== id)\n    });\n  }\n  // componentDidUpdate(prevProps, prevState) {\n  //   console.log(\"IN COMPONENT DID UPDATE\");\n  //   console.log(prevState.todos);\n  //   console.log(this.state.todos);\n  // }\n  update(id, updatedTask) {\n    const updatedTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, task: updatedTask };\n      }\n      return todo;\n    });\n    this.setState({ todos: updatedTodos });\n  }\n  toggleCompletion(id) {\n    const updatedTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n      return todo;\n    });\n    this.setState({ todos: updatedTodos });\n  }\n  render() {\n    const todos = this.state.todos.map(todo => {\n      return (\n        <Todo\n          key={todo.id}\n          id={todo.id}\n          task={todo.task}\n          completed={todo.completed}\n          removeTodo={this.remove}\n          updateTodo={this.update}\n          toggleTodo={this.toggleCompletion}\n        />\n      );\n    });\n    return (\n      <div className='TodoList'>\n        <h1>\n          Todo List! <span>A Simple React Todo List App.</span>\n        </h1>\n        <ul>{todos}</ul>\n        <NewTodoForm createTodo={this.create} />\n      </div>\n    );\n  }\n}\nexport default TodoList;\n","import React, { Component } from \"react\";\nimport TodoList from \"./TodoList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}